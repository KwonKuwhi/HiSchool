<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="/style.css" />
    <!-- axios CDN -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <title>하이스쿨 - 게시글 작성</title>
  </head>

  <body>
    <%- include('../component/header') %>
    <div class="container">
      <!-- 글쓰기 폼 -->
      <form id="post-form" name="add-post">
        <h2>게시글 작성</h2>
        <input
          type="text"
          id="post-title"
          name="title"
          placeholder="제목을 입력하세요"
        />
        <textarea
          id="post-content"
          name="content"
          placeholder="내용을 입력하세요"
        ></textarea>
        <input
          type="file"
          name="filesInput"
          id="filesInput"
          accept="image/*"
          onchange="uploadToClient()"
          multiple
        />
        <div id="preview"></div>


        <button type="button" class="btn-primary" onclick="addpost()">
          등록하기
        </button>
      </form>
    </div>

    <script>
      const form = document.forms["add-post"];

      // EJS 템플릿 내에서 서버에서 전달한 데이터를 사용

      // filesInput 에 넣은 데이터들을 차례대로 가지고 와서
      // 하나씩 signedUrl을 받는다
      // 이 signedUrl의 결과물들을 배열로 저장해서 서버에 넘긴다

      // function readURL(input) {
      //   if (input.files && input.files[0]) {
      //     console.log("입력된 파일 없음");
      //     var reader = new FileReader();
      //     reader.onload = function (e) {
      //       document.getElementById("preview").src = e.target.result;
      //     };
      //     for (i = 0; input.files.length; i++) {
      //       reader.readAsDataURL(input.files[i]);
      //     }
      //   } else {
      //     document.getElementById("preview").src = "";
      //   }
      // }

      // function readURL(input) {
      //   let files = input.target.files;
      //   let reader = new FileReader();
      //   let file;
      //   for (let i = 0; i < files.length; i++) {
      //     (function (file) {
      //       var reader = new FileReader();
      //       reader.onload = (file) => {
      //         document.getElementById("preview").src = reader.result;
      //       };
      //       reader.readAsDataURL(file);
      //     })(files[i]);
      //   }
      // }

      function readURL(input) {}

      function readFiles() {
        var files = document.getElementById("filesInput").files;

        for (var i = 0; i < files.length; i++) {
          alert(files[i].name);
        }
      }

      let createObjectURL = null;
      let images = null;
      let imagesArr = []
      let payload = []
      const uploadFiles = document.querySelector("#filesInput");
      let uploadedFileUrl = "";
      let uploadedUrl = []
      let uploadImages = []

      function uploadToClient(e) {
        if (createObjectURL) {
          URL.revokeObjectUrl(createObjectURL);
        }

        console.log("282 : uploadedFiles", uploadFiles);
        if (uploadFiles.files && uploadFiles.files[0]) {
          console.log('if문 안으로');
          console.log(uploadFiles.files.length);
          for (i = 0; i < uploadFiles.files.length; i++) {
            console.log(i);
            const img = uploadFiles.files[i];
            imagesArr.push(uploadFiles.files[i])
            images = img
            console.log("286 images", images);
            createObjectURL = URL.createObjectURL(img);
          }
        }

        console.log('images', images);
        console.log('imagesArr', imagesArr);
        console.log('imagesArr type', imagesArr[0].type);



      for(i = 0; i < imagesArr.length; i++) {
        payload.push({
          name: Math.random().toString(36).substring(2, 32),
          type: imagesArr[i].type
        })
      }


      }


      async function handleSignedUrl() {
        const uploadedFileOriginUrl = await uploadImgClient();
        console.log(uploadedFileOriginUrl)
      }

      

      async function uploadImgClient() {
        console.log("uploadImgClient 실행");
        try {
          const result = await axios({
            method: "POST",
            url: "/s3MultipleSignedUrl",
            data: payload
          });

          const axiosResult = result;
          console.log("axiosResult : ", axiosResult);
          const signedUrl = axiosResult.data;
          console.log("signedURL", signedUrl);

          

          for(i = 0; i < signedUrl.length; i++) {
            const uploadRes = await axios({
            method: "PUT",
            url: signedUrl[i],
            data: imagesArr[i],
          });
          console.log("uploadRes : ", uploadRes.config.url);
          uploadedUrl.push(uploadRes.config.url)
          console.log('uploadedUrl', uploadedUrl);
          }
          

          // console.log('first uploadedfileurl', uploadedFileUrl)
          return uploadedUrl;
        } catch (err) {
          console.log(err);
        }
      }

      async function addpost() {
        const uploadedFileOriginUrl = await uploadImgClient();

        

        if (uploadedFileOriginUrl !== null) {
          console.log("presignedURL 있어요");
          console.log('uploadedFileOriginUrl', uploadedFileOriginUrl );

          for(i = 0; i < uploadedFileOriginUrl.length; i++) {
            const parts = uploadedFileOriginUrl[i].split("/")
            uploadImages.push(parts[parts.length -1].split("?")[0])
          }

          console.log('uploadedImages', uploadImages);
          
        } else {
          console.log("presignedURL 없어요");
          uploadImages = "";
        }

        console.log("uploadImages", uploadImages);


        await axios({
          method: "POST",
          url: `/myclubNewPost/<%= data %>`,
          data: {
            // 클라이언트에서 서버로 전달할 club_id
            // userid_num: "2", // 임시 데이터
            title: form.title.value,
            content: form.content.value,
            image: uploadImages,
          },
        }).then((res) => {
          console.log(res.data);
          if (res.status === 200) {
            const club_id = res.data.club_id; // 응답으로부터 post_id를 얻음
            const post_id = res.data.post_id; // 응답으로부터 post_id를 얻음
            alert("게시물 등록완료");
            // 새 게시물 엘리먼트 생성
            const newPostElement = document.createElement("div");
            newPostElement.innerHTML = `
                  <h3>${form.title.value}</h3>
                  <p>${form.content.value}</p>
               `;
            window.location.href = `/myclubPostDetail/${club_id}/${post_id}`;
          }
        });
      }
    </script>
  </body>
</html>
