<!DOCTYPE html>
<html lang="ko">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <!-- axios CDN -->
  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
  <link rel="stylesheet" href="../../static/style.css">
  <style>
    .postImages {
      display: flex;
      flex-direction: column;
      gap: 20px;
      width: 100px;
    }
  </style>
</head>

<body>
  <%- include('../component/header') %>
    <div class="container">
      <div class="board">
        <!-- 수정 폼 -->
        <form id="editForm">
          <div>
            <label for="title">제목</label>
            <input type="text" id="title" value="<%= data.title %>">
          </div>
          <div>
            <label for="content">내용</label>
            <textarea id="content"><%= data.content %></textarea>
          </div>

          <input type="file" name="filesInput" id="filesInput" accept="image/*" onchange="uploadToClient()" multiple />
          <div id="preview"></div>


          <div class="postImages">
            <% let parsedPostImages=[] %>
              <% for(i=0; i < postImages.length; i++) { %>
                <% const parts=postImages[i].split("/") %>
                  <% parsedPostImages.push(parts[parts.length -1].split("?")[0]) %>
                    <img src="<%= postImages[i] %>" alt="" class="image<%= i %>" />
                    <button type="button" class="imageDeleteButton image<%= i %>"
                      onclick="handleDeleteImage('<%= parsedPostImages[i] %>')">삭제</button>
                    <% } %>
          </div>

          <button type="button" class="btn btn-primary" onclick="submitEdit()">수정하기</button>
        </form>
        <button class="btn btn-secondary" onclick="deletepost()">삭제</button>
      </div>
    </div>






    <script>
      const form = document.forms["add-post"];

      function readURL(input) { }

      function readFiles() {
        var files = document.getElementById("filesInput").files;

        for (var i = 0; i < files.length; i++) {
          alert(files[i].name);
        }
      }

      let createObjectURL = null;
      let images = null;
      let imagesArr = [];
      let payload = [];
      const uploadFiles = document.querySelector("#filesInput");
      let uploadedFileUrl = "";
      let uploadedUrl = [];
      let uploadImages = [];

      function uploadToClient(e) {
        if (createObjectURL) {
          URL.revokeObjectUrl(createObjectURL);
        }

        console.log("282 : uploadedFiles", uploadFiles);
        if (uploadFiles.files && uploadFiles.files[0]) {
          console.log('if문 안으로');
          console.log(uploadFiles.files.length);
          for (i = 0; i < uploadFiles.files.length; i++) {
            console.log(i);
            const img = uploadFiles.files[i];
            imagesArr.push(uploadFiles.files[i]);
            images = img;
            console.log("286 images", images);
            createObjectURL = URL.createObjectURL(img);
          }
        }

        console.log('images', images);
        console.log('imagesArr', imagesArr);
        console.log('imagesArr type', imagesArr[0].type);



        for (i = 0; i < imagesArr.length; i++) {
          payload.push({
            name: Math.random().toString(36).substring(2, 32),
            type: imagesArr[i].type
          });
        }


      }


      async function handleSignedUrl() {
        const uploadedFileOriginUrl = await uploadImgClient();
        console.log(uploadedFileOriginUrl);
      }



      async function uploadImgClient() {
        console.log("uploadImgClient 실행");
        try {
          const result = await axios({
            method: "POST",
            url: "/s3MultipleSignedUrl",
            data: payload
          });

          const axiosResult = result;
          console.log("axiosResult : ", axiosResult);
          const signedUrl = axiosResult.data;
          console.log("signedURL", signedUrl);



          for (i = 0; i < signedUrl.length; i++) {
            const uploadRes = await axios({
              method: "PUT",
              url: signedUrl[i],
              data: imagesArr[i],
            });
            console.log("uploadRes : ", uploadRes.config.url);
            uploadedUrl.push(uploadRes.config.url);
            console.log('uploadedUrl', uploadedUrl);
          }


          // console.log('first uploadedfileurl', uploadedFileUrl)
          return uploadedUrl;
        } catch (err) {
          console.log(err);
        }
      }

      async function addpost() {
        const uploadedFileOriginUrl = await uploadImgClient();



        if (uploadedFileOriginUrl !== null) {
          console.log("presignedURL 있어요");
          console.log('uploadedFileOriginUrl', uploadedFileOriginUrl);

          for (i = 0; i < uploadedFileOriginUrl.length; i++) {
            const parts = uploadedFileOriginUrl[i].split("/");
            uploadImages.push(parts[parts.length - 1].split("?")[0]);
          }

          console.log('uploadedImages', uploadImages);

        } else {
          console.log("presignedURL 없어요");
          uploadImages = "";
        }

        console.log("uploadImages", uploadImages);


        await axios({
          method: "POST",
          url: `/myclubNewPost/<%= data %>`,
          data: {
            // 클라이언트에서 서버로 전달할 club_id
            // userid_num: "2", // 임시 데이터
            title: form.title.value,
            content: form.content.value,
            image: uploadImages,
          },
        }).then((res) => {
          console.log(res.data);
          if (res.status === 200) {
            const club_id = res.data.club_id; // 응답으로부터 post_id를 얻음
            const post_id = res.data.post_id; // 응답으로부터 post_id를 얻음
            alert("게시물 등록완료");
            // 새 게시물 엘리먼트 생성
            const newPostElement = document.createElement("div");
            newPostElement.innerHTML = `
                <h3>${form.title.value}</h3>
                <p>${form.content.value}</p>
             `;
            window.location.href = `/myclubPostDetail/${club_id}/${post_id}`;
          }
        });
      }
    </script>



    <script>


      const club_id = "<%=data.club_id%>";
      const post_id = "<%=data.post_id%>";

      console.log(club_id);




      async function submitEdit() {

        const uploadedFileOriginUrl = await uploadImgClient();


        if (uploadedFileOriginUrl !== null) {
          console.log("presignedURL 있어요");
          console.log('uploadedFileOriginUrl', uploadedFileOriginUrl);

          for (i = 0; i < uploadedFileOriginUrl.length; i++) {
            const parts = uploadedFileOriginUrl[i].split("/");
            uploadImages.push(parts[parts.length - 1].split("?")[0]);
          }

          console.log('uploadedImages', uploadImages);

        } else {
          console.log("presignedURL 없어요");
          uploadImages = "";
        }

        console.log("uploadImages", uploadImages);




        const title = document.getElementById('title').value;
        const content = document.getElementById('content').value;
        // const image = document.getElementById('image').value;



        axios.patch(`/myclubEditPost/${club_id}/${post_id}`, {
          title: title,
          content: content,
          image: uploadImages,

        })
          .then(function (res) {
            alert('게시글이 수정되었습니다.');
            window.location.href = `/myclubPostDetail/${club_id}/${post_id}`;
          })
          .catch(function (err) {
            console.error('Edit error:', err);
            alert('게시글 수정 중 오류가 발생했습니다.');
          });
      }

      function deletepost() {
        if (confirm('게시글을 삭제하시겠습니까?')) {
          axios.delete(`/myclubEditPost/${club_id}/${post_id}`)
            .then(function (res) {
              if (res.data) {
                alert('게시글이 삭제되었습니다.');
                window.location.href = `/myClubPostMain/${club_id}`; // 게시글 목록으로 리디렉션
              } else {
                alert('게시글 삭제에 실패했습니다.');
              }
            })
            .catch(function (error) {
              alert('게시글 삭제 중 오류가 발생했습니다.');
              console.error('Delete error:', error);
            });
        }
      }


      async function handleDeleteImage(file) {
        console.log(file);

        const result = await axios({
          method: "POST",
          url: `/s3Delete/${club_id}/${post_id}`,
          data: {
            key: file
          }
        });

        console.log(result);
        if (result.data) {
          alert('삭제되었습니다');
          location.reload();
        }

      }

    </script>

</body>

</html>